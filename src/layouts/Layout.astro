---
interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const { 
  title, 
  description = "Max Plamadeala's personal website", 
  ogImage 
} = Astro.props;

const dynamicOgImagePath = `/api/og/${encodeURIComponent(title)}`;

let canonicalURL;
let imageURL;

try {
  const baseUrl = import.meta.env.SITE || "https://max-plamadeala.com";
  canonicalURL = new URL(Astro.url.pathname, baseUrl);
  
  // If ogImage is provided and is already a full URL, use it directly
  // Otherwise, construct the complete URL for the dynamic OG image
  imageURL = ogImage && ogImage.startsWith('http') 
    ? ogImage 
    : new URL(dynamicOgImagePath, baseUrl).toString();
} catch (e) {
  canonicalURL = Astro.url.pathname;
  imageURL = ogImage && ogImage.startsWith('http') 
    ? ogImage 
    : `https://max-plamadeala.com${dynamicOgImagePath}`;
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/grumpy_cat.jpeg" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />

    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={imageURL} />
    <meta property="og:site_name" content="@grumpycatyo-collab" />

    
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={imageURL} />
    <meta property="twitter:creator" content="@grumpycatyo-collab" />

    <script is:inline>
      const savedTheme = localStorage.getItem("theme") || 
                         (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
      document.documentElement.classList.toggle("dark", savedTheme === "dark");
    </script>
    <!-- Cloudflare Web Analytics --><script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "3d7918b1a5684e6b92acf3fabee353d0"}'></script><!-- End Cloudflare Web Analytics -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Merriweather:ital,wght@0,300;0,400;0,700;1,300;1,400&display=swap" rel="stylesheet">
	  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">
    <title>{title}</title>
  </head>
  <body>
    <slot />
    <script>
      const theme = (() => {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();
          
      if (theme === "light") {
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
      }

      window.localStorage.setItem("theme", theme as string);
    // Giscus theme sync
    const syncGiscusTheme = () => {
      const theme = (() => {
        if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();
      
      const iframe = document.querySelector('.giscus-frame') as HTMLIFrameElement;
      if (iframe) {
        const giscusTheme = theme === "dark" ? "dark" : "light";
        
        if (iframe.contentWindow) {
          iframe.contentWindow.postMessage(
            { giscus: { setConfig: { theme: giscusTheme } } },
            'https://giscus.app'
          );
        }
      }
    };

    const observer = new MutationObserver(() => {
      syncGiscusTheme();
    });

    observer.observe(document.documentElement, { 
      attributes: true, 
      attributeFilter: ['class'] 
    });

    window.addEventListener('storage', (event) => {
      if (event.key === 'theme') {
        syncGiscusTheme();
      }
    });

    window.addEventListener('load', () => {
      const giscusFrame = document.querySelector('.giscus-frame');
      if (giscusFrame) {
        giscusFrame.addEventListener('load', syncGiscusTheme);
      } else {
        setTimeout(() => {
          const retryFrame = document.querySelector('.giscus-frame');
          if (retryFrame) {
            retryFrame.addEventListener('load', syncGiscusTheme);
          }
        }, 1000);
      }
    });
    // End Giscus theme sync
    </script>
  </body>
</html>

<style is:global>
  :root {
  --bg-color: #ffffff;
  --text-color: #121212;
  --accent-color: #3a86ff;
  --muted-color: #6b7280;
  --border-color: #e5e7eb;
  --star-border-color: #6b7280;
}

.dark {
  --bg-color: #121212;
  --text-color: #f3f4f6;
  --accent-color: #60a5fa;
  --muted-color: #9ca3af;
  --border-color: #374151;
  --star-border-color: #9ca3af;
}

  html {
    font-family: 'Inter', system-ui, sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
  }

  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Inter', sans-serif;
    font-weight: 400;
  }

  code {
    font-family: 'JetBrains Mono', Menlo, Monaco, Lucida Console, monospace;
  }

  .container {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  main {
    padding: 3rem 0;
  }
  :root {
  --giscus-border-color: var(--border-color);
  }

  .giscus-frame {
    margin-top: 1rem;
  }

  .dark .giscus-frame {
    color-scheme: dark;
}
</style>